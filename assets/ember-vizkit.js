eval("//# sourceURL=assets/ember-cli/loader.js");

;eval("define(\"ember-vizkit/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    var Resolver = __dependency2__[\"default\"];\n\n    var loadInitializers = __dependency3__[\"default\"];\n\n    \r\n    Ember.MODEL_FACTORY_INJECTIONS = true;\r\n    \r\n    var App = Ember.Application.extend({\r\n      modulePrefix: \'ember-vizkit\', // TODO: loaded via config\r\n      Resolver: Resolver\r\n    });\r\n    \r\n    loadInitializers(App, \'ember-vizkit\');\r\n    \r\n    __exports__[\"default\"] = App;\n  });//# sourceURL=ember-vizkit/app.js");

;eval("define(\"ember-vizkit/components/line-chart\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Component.extend({\r\n        chart: null,\r\n        data: [],\r\n    \r\n        dataChanged: function() {\r\n            this.chart.load({\r\n                columns: this.data\r\n            });\r\n        }.observes(\'data.[]\'),\r\n    \r\n        didInsertElement: function() {\r\n            Ember.run.later(this, function() {\r\n                this.chart = c3.generate({\r\n                    bindto: \'#line-chart\',\r\n                    data: {\r\n                        columns: this.data,\r\n                        type: \'spline\'\r\n                    },\r\n                    legend: {\r\n                        position: \'right\'\r\n                    },\r\n                    axis: {\r\n                        x: {\r\n                            label: {\r\n                                text: \'Nodes\',\r\n                                position: \'inner-right\'\r\n                            }\r\n                        },\r\n                        y: {\r\n                            label: {\r\n                                text: \'Bandwidth\',\r\n                                position: \'outer-middle\'\r\n                            }\r\n                        },\r\n                    },\r\n                    grid: {\r\n                        x: {\r\n                            show: false\r\n                        },\r\n                        y: {\r\n                            show: true\r\n                        }\r\n                    },\r\n                    subchart: {\r\n                        show: false\r\n                    },\r\n                    zoom: {\r\n                        enabled: true\r\n                    }\r\n                });\r\n            }, 250);\r\n        }\r\n    });\n  });//# sourceURL=ember-vizkit/components/line-chart.js");

;eval("define(\"ember-vizkit/components/network-graph\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Component.extend({\r\n        nodes: [],\r\n        links: [],\r\n        zones: [],\r\n    \r\n        force: null,\r\n        svg: null,\r\n        node: null,\r\n        link: null,\r\n        legend: null,\r\n    \r\n        width: null,\r\n        height: null,\r\n    \r\n        padding: 0.0, // separation between same-color circles\r\n        clusterPadding: 75.0, // separation between different-color circles\r\n        maxRadius: 30,\r\n        clusters: new Array(2),\r\n    \r\n        color: null,\r\n        diameter: null,\r\n    \r\n        tick: function(e) {\r\n            this.link.attr(\'d\', function(d) {\r\n                var mx = (d.source.x + d.target.x) / 2;\r\n                var my = (d.source.y + d.target.y) / 2;\r\n                return \'M\' + d.source.x + \',\' + d.source.y + \'L\' + mx + \',\' + my + \'L\' + d.target.x + \',\' + d.target.y;\r\n            });\r\n    \r\n            this.node\r\n                .each(this.cluster(0.1 * e.alpha))\r\n                .each(this.collide(0.5 * e.alpha))\r\n                .attr(\'transform\', function(d) {\r\n                    return \'translate(\' + d.x + \',\' + d.y + \')\';\r\n                });\r\n        },\r\n    \r\n        update: function() {\r\n            var self = this;\r\n    \r\n            self.link = self.svg.selectAll(\'.link\')\r\n                .data(self.force.links(), function(d) {\r\n                    return d.id;\r\n                });\r\n    \r\n            self.link.enter()\r\n                .append(\'path\')\r\n                .attr(\'class\', \'link\')\r\n                .attr(\'marker-mid\', \'url(#arrow)\');\r\n    \r\n            self.link.exit().remove();\r\n    \r\n            self.node = self.svg.selectAll(\'g.node\')\r\n                .data(self.force.nodes(), function(d) {\r\n                    return d.id;\r\n                });\r\n    \r\n            self.node.select(\'.bandwidth-border\')\r\n                .attr(\'stroke\', function(d) {\r\n                    return d3.rgb(self.color(d.zone)).brighter(2);\r\n                })\r\n                .transition()\r\n                .duration(750)\r\n                .attr(\'stroke-opacity\', 1)\r\n                .attr(\'r\', function(d) {\r\n                    return self.diameter(d.bandwidth);\r\n                })\r\n                .transition()\r\n                .delay(750)\r\n                .duration(750)\r\n                .attr(\'stroke-opacity\', 0);\r\n    \r\n            self.node.select(\'.bandwidth\')\r\n                .transition()\r\n                .duration(1500)\r\n                .attr(\'r\', function(d) {\r\n                    return self.diameter(d.bandwidth);\r\n                })\r\n                .attr(\'fill\', function(d) {\r\n                    return self.color(d.zone);\r\n                });\r\n    \r\n            self.node.select(\'.max-bandwidth\')\r\n                .classed(\'stalling\', function(d) {\r\n                    return d.isStalling;\r\n                })\r\n                .transition()\r\n                .duration(1500)\r\n                .attr(\'r\', function(d) {\r\n                    return self.diameter(d.maxBandwidth);\r\n                })\r\n                .attr(\'fill\', function(d) {\r\n                    return self.color(d.zone);\r\n                })\r\n                .attr(\'fill\', function(d) {\r\n                    return d.isStalling ? self.desaturate(self.color(d.zone)) : self.color(d.zone);\r\n                });\r\n            // .attr(\'fill\', function (d) {\r\n            //   if (d.isStalling != undefined && d.isStalling) {\r\n            //     var col = d3.hsl(color(d.zone));\r\n            //     col.s = 0;\r\n            //     return col.rgb();\r\n            //   }\r\n            //   return color(d.zone);\r\n            // })\r\n            // .attr(\'stroke\', \'black\')\r\n            // .attr(\'stroke-width\', \'2px\')\r\n            // .attr(\'stroke-dasharray\', \'5 5\')\r\n            // .attr(\'stroke-linecap\', \'round\');\r\n    \r\n            var nodeEnter = self.node\r\n                .enter()\r\n                .append(\'g\')\r\n                .attr(\'class\', \'node\')\r\n                .call(self.force.drag);\r\n    \r\n            nodeEnter\r\n                .append(\'circle\')\r\n                .attr(\'class\', \'max-bandwidth\')\r\n                .attr(\'r\', function(d) {\r\n                    return self.diameter(d.maxBandwidth);\r\n                })\r\n                .attr(\'fill\', function(d) {\r\n                    return self.color(d.zone);\r\n                })\r\n                .attr(\'fill-opacity\', \'0.5\');\r\n    \r\n            nodeEnter\r\n                .append(\'circle\')\r\n                .attr(\'class\', \'bandwidth\')\r\n                .attr(\'r\', function(d) {\r\n                    return self.diameter(d.bandwidth);\r\n                })\r\n                .attr(\'fill\', function(d) {\r\n                    return self.color(d.zone);\r\n                });\r\n    \r\n            nodeEnter\r\n                .append(\'circle\')\r\n                .attr(\'class\', \'bandwidth-border\')\r\n                .attr(\'fill-opacity\', 0)\r\n                .attr(\'stroke\', function(d) {\r\n                    return d3.rgb(self.color(d.zone)).brighter(2);\r\n                })\r\n                .attr(\'stroke-opacity\', 0)\r\n                .attr(\'r\', function(d) {\r\n                    return self.diameter(d.bandwidth);\r\n                });\r\n    \r\n            nodeEnter\r\n                .append(\'text\')\r\n                .text(function(d) {\r\n                    return d.name;\r\n                });\r\n    \r\n            self.node.exit().remove();\r\n    \r\n            self.legend = self.svg.selectAll(\'.legend\')\r\n                .data(self.zones, function(d) {\r\n                    return d.id;\r\n                });\r\n    \r\n            self.legend.select(\'rect\')\r\n                .attr(\'fill\', function(d) {\r\n                    return self.color(d.id);\r\n                });\r\n    \r\n            self.legend.select(\'text\')\r\n                .text(function(d) {\r\n                    return d.name;\r\n                });\r\n    \r\n            var legendEnter = self.legend.enter()\r\n                .append(\'g\')\r\n                .attr(\'class\', \'legend\')\r\n                .attr(\'transform\', \'translate(20, 70)\');\r\n    \r\n            legendEnter.append(\'rect\')\r\n                .attr(\'x\', 0 + 20)\r\n                .attr(\'y\', function(d, i) {\r\n                    return i * 24;\r\n                })\r\n                .attr(\'width\', 16)\r\n                .attr(\'height\', 16)\r\n                .attr(\'fill\', function(d) {\r\n                    return self.color(d.id);\r\n                });\r\n    \r\n            legendEnter.append(\'text\')\r\n                .attr(\'x\', 36 + 8)\r\n                .attr(\'y\', function(d, i) {\r\n                    return (i * 24) + 14;\r\n                })\r\n                .text(function(d) {\r\n                    return d.name;\r\n                });\r\n    \r\n            self.legend.exit().remove();\r\n    \r\n            self.force.start();\r\n    \r\n            var tmpnodes = document.querySelectorAll(\'.node\');\r\n            _(tmpnodes).forEach(function(n) {\r\n                var parent = n.parentNode;\r\n                parent.appendChild(n);\r\n            });\r\n        },\r\n    \r\n        cluster: function(alpha) {\r\n            var self = this;\r\n    \r\n            return function(d) {\r\n                var cluster = self.clusters[d.zone];\r\n                if (cluster === d) {\r\n                    return;\r\n                }\r\n                var x = d.x - cluster.x,\r\n                    y = d.y - cluster.y,\r\n                    l = Math.sqrt(x * x + y * y),\r\n                    r = d.maxBandwidth / 10 + cluster.maxBandwidth / 10;\r\n                if (l != r) {\r\n                    l = (l - r) / l * alpha;\r\n                    d.x -= x *= l;\r\n                    d.y -= y *= l;\r\n                    cluster.x += x;\r\n                    cluster.y += y;\r\n                }\r\n            };\r\n        },\r\n    \r\n        collide: function(alpha) {\r\n            var self = this;\r\n    \r\n            var quadtree = d3.geom.quadtree(self.nodes);\r\n            return function(d) {\r\n                var r = d.maxRadius / 10 + self.maxRadius / 10 + Math.max(self.padding, self.clusterPadding),\r\n                    nx1 = d.x - r,\r\n                    nx2 = d.x + r,\r\n                    ny1 = d.y - r,\r\n                    ny2 = d.y + r;\r\n                quadtree.visit(function(quad, x1, y1, x2, y2) {\r\n                    if (quad.point && (quad.point !== d)) {\r\n                        var x = d.x - quad.point.x,\r\n                            y = d.y - quad.point.y,\r\n                            l = Math.sqrt(x * x + y * y),\r\n                            r = d.maxBandwidth / 10 + quad.point.maxBandwidth / 10 + (d.zone === quad.point.zone ? self.padding : self.clusterPadding);\r\n                        if (l < r) {\r\n                            l = (l - r) / l * alpha;\r\n    \r\n                            if (d.x - self.maxRadius > 0 && d.x + self.maxRadius < self.width) {\r\n                                d.x -= x *= l;\r\n                                if (quad.point.x - self.maxRadius > 0 && quad.point.x + self.maxRadius < self.width) {\r\n                                    quad.point.x += x;\r\n                                }\r\n                            }\r\n    \r\n                            if (d.y - self.maxRadius > 0 && d.y + self.maxRadius < self.height) {\r\n                                d.y -= y *= l;\r\n                                if (quad.point.y - self.maxRadius > 0 && quad.point.y + self.maxRadius < self.height) {\r\n                                    quad.point.y += y;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;\r\n                });\r\n            };\r\n        },\r\n    \r\n        nodesChanged: function() {\r\n            var self = this;\r\n    \r\n            var zones = _(this.nodes).groupBy(\'zone\').pairs()[\"valueOf\"]();\r\n            _(zones).forEach(function(z) {\r\n                self.clusters[z[0]] = _(z[1]).max(\'bandwidth\')[\"valueOf\"]();\r\n            });\r\n    \r\n            this.update();\r\n        }.observes(\'nodes.[]\', \'nodes.@each.bandwidth\', \'nodes.@each.zone\', \'nodes.@each.isStalling\'),\r\n    \r\n        linksChanged: function() {\r\n            var self = this;\r\n    \r\n            _(self.nodes).forEach(function(node, i) {\r\n                _(self.links).filter({\r\n                    source: node.id\r\n                }).forEach(function(link) {\r\n                    link.set(\'source\', i);\r\n                });\r\n                _(self.links).filter({\r\n                    target: node.id\r\n                }).forEach(function(link) {\r\n                    link.set(\'target\', i);\r\n                });\r\n            });\r\n    \r\n            this.update();\r\n        }.observes(\'links.[]\', \'links.@each.source\', \'links.@each.target\'),\r\n    \r\n        desaturate: function(d) {\r\n            var color = d3.hsl(d);\r\n            color.s = 0.35;\r\n            return color;\r\n        },\r\n    \r\n        resizeGraph: function() {\r\n            this.width = Ember.$(Ember.$(\'#network-graph\').parents(\':not(.ember-view)\')[0]).width();\r\n            this.height = Ember.$(Ember.$(\'#network-graph\').parents(\':not(.ember-view)\')[0]).height();\r\n            this.force.size([this.width, this.height]);\r\n            this.svg.attr(\'width\', this.width);\r\n            this.svg.attr(\'height\', this.height);\r\n        },\r\n    \r\n        didInsertElement: function() {\r\n            window.onresize = this.resizeGraph.bind(this);\r\n    \r\n            Ember.run.later(this, function() {\r\n                this.width = Ember.$(Ember.$(\'#network-graph\').parents(\':not(.ember-view)\')[0]).width();\r\n                this.height = Ember.$(Ember.$(\'#network-graph\').parents(\':not(.ember-view)\')[0]).height();\r\n    \r\n                console.log(this.width);\r\n                console.log(this.height);\r\n    \r\n                this.color = d3.scale.category10()\r\n                    .domain([\'z_1\', \'z_2\']),\r\n    \r\n                this.diameter = d3.scale.linear()\r\n                    .domain([0, 500])\r\n                    .range([0, this.maxRadius]),\r\n    \r\n                this.force = d3.layout.force()\r\n                    .nodes(this.nodes)\r\n                    .links(this.links)\r\n                    .gravity(0.05)\r\n                    .linkDistance(150)\r\n                    .charge(-400)\r\n                    .friction(0.80)\r\n                    .size([this.width, this.height])\r\n                    .on(\'tick\', this.tick.bind(this));\r\n    \r\n                this.svg = d3.select(\'#network-graph\').append(\'svg\')\r\n                    .attr(\'width\', this.width)\r\n                    .attr(\'height\', this.height);\r\n    \r\n                this.svg.append(\"defs\").selectAll(\"marker\")\r\n                    .data([\"arrow\"])\r\n                    .enter()\r\n                    .append(\"marker\")\r\n                    .attr(\"id\", function(d) {\r\n                        return d;\r\n                    })\r\n                    .attr(\"viewBox\", \"0 -5 10 10\")\r\n                    .attr(\"markerWidth\", 8)\r\n                    .attr(\"markerHeight\", 8)\r\n                    .attr(\"orient\", \"auto\")\r\n                    .append(\"path\")\r\n                    .attr(\"d\", \"M0,-5L10,0L0,5\");\r\n    \r\n                this.svg.append(\'g\')\r\n                    .attr(\'width\', 100)\r\n                    .attr(\'height\', 100)\r\n                    .attr(\'class\', \'legendHeading\')\r\n                    .attr(\'transform\', \'translate(40, 50)\')\r\n                    .append(\'text\')\r\n                    .text(\'Zones\');\r\n    \r\n                this.node = this.svg.selectAll(\'.node\');\r\n                this.link = this.svg.selectAll(\'.link\');\r\n                this.legend = this.svg.selectAll(\'.legend\');\r\n    \r\n                this.nodesChanged();\r\n                this.linksChanged();\r\n                this.update();\r\n            }.bind(this), 250);\r\n    \r\n            //     // tmpnodes.forEach(function (n) {\r\n            //     //   var parent = n.parentNode;\r\n            //     //   parent.appendChild(n);\r\n            //     // });\r\n    \r\n            //     // $(\'.node\').each(function (i, o) { var parent = $(o).parent(); parent.append(o); });\r\n            // }\r\n        }\r\n    });\n  });//# sourceURL=ember-vizkit/components/network-graph.js");

;eval("define(\"ember-vizkit/components/sparkline-chart\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Component.extend({\r\n        values: [],\r\n    \r\n        valuesString: function() {\r\n            return _(this.values).last(20).join(\',\');\r\n        }.property(\'values.[]\'),\r\n    \r\n        valuesChanged: function() {\r\n            Ember.run.schedule(\'afterRender\', function () {\r\n                this.$(\'#peity-values\').change();\r\n            }.bind(this));\r\n        }.observes(\'valuesString\'),\r\n    \r\n        didInsertElement: function() {\r\n            this.$(\'#peity-values\').peity(\'line\', {\r\n                width: 100,\r\n                fill: \'none\'\r\n            });\r\n        }\r\n    });\n  });//# sourceURL=ember-vizkit/components/sparkline-chart.js");

;eval("define(\"ember-vizkit/controllers/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Controller.extend({\r\n        nodes: [],\r\n        links: [],\r\n        zones: [],\r\n    \r\n        init: function() {\r\n            this.socket = io.connect(\'http://demonstrator.herokuapp.com:80\');\r\n            this.socket.on(\'links\', this.updateLinks.bind(this));\r\n            this.socket.on(\'node_update\', this.updatesNodes.bind(this));\r\n        },\r\n    \r\n        nodesForLineChart: function () {\r\n            var preparedData = [];\r\n    \r\n            this.nodes.forEach(function (n) {\r\n                var column = [];\r\n                column.pushObject(n.get(\'name\'));\r\n                column.pushObjects(n.get(\'bandwidthHistory\'));\r\n                preparedData.pushObject(column);\r\n            });\r\n    \r\n            return preparedData;\r\n        }.property(\'nodes.@each.bandwidth\'),\r\n    \r\n        updatesNodes: function(data) {\r\n            data.forEach(function(o) {\r\n                var node = this.nodes.findBy(\'id\', o.id);\r\n                if (node) {\r\n                    node.setProperties({\r\n                        name: o.name || node.name,\r\n                        zone: o.zone || node.zone,\r\n                        bandwidth: o.bandwidth || node.bandwidth,\r\n                        maxBandwidth: o.maxBandwidth || node.maxBandwidth\r\n                    });\r\n                    if (o.bandwidth !== undefined) {\r\n                        node.bandwidthHistory.pushObject(o.bandwidth);\r\n                    }\r\n                    if (o.isStalling !== undefined) {\r\n                        node.set(\'isStalling\', o.isStalling);\r\n                    }\r\n                } else {\r\n                    this.nodes.pushObject(Ember.Object.create(o));\r\n                }\r\n            }.bind(this));\r\n    \r\n            // THE API DOES NOT REFLECT NODE LEAVES\r\n            //\r\n            // for (var i = 0; i < this.nodes.length; i++) {\r\n            //     var node = this.nodes[i];\r\n            //     if (!_(data).find({\r\n            //         id: node.id\r\n            //     })) {\r\n            //         this.nodes.removeObject(node);\r\n            //     }\r\n            // }\r\n        },\r\n    \r\n        updateLinks: function(data) {\r\n            data.forEach(function(o) {\r\n                var link = this.links.findBy(\'id\', o.id);\r\n                if (link) {\r\n                    link.setProperties({\r\n                        source: o.source,\r\n                        target: o.target\r\n                    });\r\n                } else {\r\n                    this.links.pushObject(Ember.Object.create(o));\r\n                }\r\n            }.bind(this));\r\n    \r\n            for (var i = 0; i < this.links.length; i++) {\r\n                var link = this.links[i];\r\n                if (!_(data).find({\r\n                    id: link.id\r\n                })) {\r\n                    this.links.removeObject(link);\r\n                }\r\n            }\r\n        },\r\n    \r\n        nodesChanged: function() {}.observes(\'nodes.[]\'),\r\n    \r\n        linksChanged: function() {}.observes(\'links.[]\', \'links.@each.source\', \'links.@each.target\'),\r\n    });\n  });//# sourceURL=ember-vizkit/controllers/index.js");

;eval("define(\"ember-vizkit/router\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    var Router = Ember.Router.extend({\r\n      location: EmberVIZKITENV.locationType\r\n    });\r\n    \r\n    Router.map(function() {\r\n    });\r\n    \r\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=ember-vizkit/router.js");

;eval("define(\"ember-vizkit/routes/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = Ember.Route.extend({\r\n        model: function() {\r\n            var RESTUrl = \'http://demonstrator.herokuapp.com/\';\r\n    \r\n            return new Ember.RSVP.hash({\r\n                nodes: Ember.$.ajax({url: RESTUrl + \'nodes\', dataType: \'json\', type: \'GET\'}),\r\n                links: Ember.$.ajax({url: RESTUrl + \'links\', dataType: \'json\', type: \'GET\'}),\r\n                zones: Ember.$.ajax({url: RESTUrl + \'zones\', dataType: \'json\', type: \'GET\'}),\r\n            });\r\n        },\r\n    \r\n        setupController: function (controller, model) {\r\n            var nodes = [];\r\n            model.nodes.forEach(function (n) {\r\n                n.bandwidthHistory = [0];\r\n                nodes.pushObject(Ember.Object.create(n));\r\n            });\r\n    \r\n            var links = [];\r\n            model.links.forEach(function (n) {\r\n                links.pushObject(Ember.Object.create(n));\r\n            });\r\n    \r\n            var zones = [];\r\n            model.zones.forEach(function (n) {\r\n                zones.pushObject(Ember.Object.create(n));\r\n            });\r\n            controller.set(\'nodes\', nodes);\r\n            controller.set(\'links\', links);\r\n            controller.set(\'zones\', zones);\r\n        }\r\n    });\n  });//# sourceURL=ember-vizkit/routes/index.js");

;eval("define(\"ember-vizkit/templates/components/line-chart\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<div id=\\\"line-chart\\\"></div>\\r\\n\");\n      \n    });\n  });//# sourceURL=ember-vizkit/templates/components/line-chart.js");

;eval("define(\"ember-vizkit/templates/components/network-graph\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<div id=\\\"network-graph\\\"></div>\\r\\n\");\n      \n    });\n  });//# sourceURL=ember-vizkit/templates/components/network-graph.js");

;eval("define(\"ember-vizkit/templates/components/sparkline-chart\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1;\n\n\n      data.buffer.push(\"<span id=\\\"peity-values\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"valuesString\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</span>\\r\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=ember-vizkit/templates/components/sparkline-chart.js");

;eval("define(\"ember-vizkit/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\r\\n            <div class=\\\"menu-item\\\">\\r\\n                <div horizontal layout flex center>\\r\\n                    \");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'type\': (\"checkbox\"),\n        \'checked\': (\"isStalling\")\n      },hashTypes:{\'type\': \"STRING\",\'checked\': \"ID\"},hashContexts:{\'type\': depth0,\'checked\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"\\r\\n                    <h4 \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"isStalling\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\" flex>\");\n      stack1 = helpers._triageMustache.call(depth0, \"name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</h4>\\r\\n                    \");\n      data.buffer.push(escapeExpression((helper = helpers[\'sparkline-chart\'] || (depth0 && depth0[\'sparkline-chart\']),options={hash:{\n        \'values\': (\"bandwidthHistory\")\n      },hashTypes:{\'values\': \"ID\"},hashContexts:{\'values\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"sparkline-chart\", options))));\n      data.buffer.push(\"\\r\\n                </div>\\r\\n            </div>\\r\\n            \");\n      return buffer;\n      }\n\n      data.buffer.push(\"<div class=\\\"toolbar\\\" horizontal layout center>\\r\\n    <i class=\\\"fa fa-share-alt fa-inverse fa-2x\\\"></i>\\r\\n    <h2>Network Visualization Toolkit</h2>\\r\\n</div>\\r\\n<div class=\\\"main\\\" vertical layout>\\r\\n    <div horizontal layout>\\r\\n        <div class=\\\"sidebar\\\" vertical layout>\\r\\n            \");\n      stack1 = helpers.each.call(depth0, \"nodes\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\r\\n        </div>\\r\\n        <div class=\\\"content\\\" vertical layout flex>\\r\\n            <div class=\\\"card\\\" flex two>\\r\\n                \");\n      data.buffer.push(escapeExpression((helper = helpers[\'network-graph\'] || (depth0 && depth0[\'network-graph\']),options={hash:{\n        \'nodes\': (\"nodes\"),\n        \'links\': (\"links\"),\n        \'zones\': (\"zones\")\n      },hashTypes:{\'nodes\': \"ID\",\'links\': \"ID\",\'zones\': \"ID\"},hashContexts:{\'nodes\': depth0,\'links\': depth0,\'zones\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"network-graph\", options))));\n      data.buffer.push(\"\\r\\n            </div>\\r\\n            <br>\\r\\n            <div class=\\\"card\\\" flex>\\r\\n                \");\n      data.buffer.push(escapeExpression((helper = helpers[\'line-chart\'] || (depth0 && depth0[\'line-chart\']),options={hash:{\n        \'data\': (\"nodesForLineChart\")\n      },hashTypes:{\'data\': \"ID\"},hashContexts:{\'data\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"line-chart\", options))));\n      data.buffer.push(\"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=ember-vizkit/templates/index.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit\');\n    test(\'ember-vizkit/app.js should pass jshint\', function() { \n      ok(true, \'ember-vizkit/app.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/app.jshint.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/components/line-chart.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit/components\');\n    test(\'ember-vizkit/components/line-chart.js should pass jshint\', function() { \n      ok(true, \'ember-vizkit/components/line-chart.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/components/line-chart.jshint.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/components/network-graph.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit/components\');\n    test(\'ember-vizkit/components/network-graph.js should pass jshint\', function() { \n      ok(false, \'ember-vizkit/components/network-graph.js should pass jshint.\\nember-vizkit/components/network-graph.js: line 224, col 21, Expected \\\'!==\\\' and instead saw \\\'!=\\\'.\\nember-vizkit/components/network-graph.js: line 342, col 49, Expected an assignment or function call and instead saw an expression.\\n\\n2 errors\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/components/network-graph.jshint.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/components/sparkline-chart.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit/components\');\n    test(\'ember-vizkit/components/sparkline-chart.js should pass jshint\', function() { \n      ok(true, \'ember-vizkit/components/sparkline-chart.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/components/sparkline-chart.jshint.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/controllers/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit/controllers\');\n    test(\'ember-vizkit/controllers/index.js should pass jshint\', function() { \n      ok(true, \'ember-vizkit/controllers/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/controllers/index.jshint.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit\');\n    test(\'ember-vizkit/router.js should pass jshint\', function() { \n      ok(true, \'ember-vizkit/router.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/router.jshint.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/routes/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit/routes\');\n    test(\'ember-vizkit/routes/index.js should pass jshint\', function() { \n      ok(true, \'ember-vizkit/routes/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/routes/index.jshint.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit/tests/helpers\');\n    test(\'ember-vizkit/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'ember-vizkit/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/tests/helpers/resolver.jshint.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit/tests/helpers\');\n    test(\'ember-vizkit/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'ember-vizkit/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/tests/helpers/start-app.jshint.js");

;eval("define(\"ember-vizkit/tests/ember-vizkit/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-vizkit/tests\');\n    test(\'ember-vizkit/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'ember-vizkit/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=ember-vizkit/tests/ember-vizkit/tests/test-helper.jshint.js");

;eval("define(\"ember-vizkit/tests/helpers/resolver\", \n  [\"ember/resolver\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n\n    \r\n    var resolver = Resolver.create();\r\n    \r\n    resolver.namespace = {\r\n      modulePrefix: \'ember-vizkit\'\r\n    };\r\n    \r\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=ember-vizkit/tests/helpers/resolver.js");

;eval("define(\"ember-vizkit/tests/helpers/start-app\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global require */\r\n    \r\n    var Application = require(\'ember-vizkit/app\')[\'default\'];\r\n    var Router = require(\'ember-vizkit/router\')[\'default\'];\r\n    var Ember = __dependency1__[\"default\"];\n\n    \r\n    __exports__[\"default\"] = function startApp(attrs) {\r\n      var App;\r\n    \r\n      var attributes = Ember.merge({\r\n        // useful Test defaults\r\n        rootElement: \'#ember-testing\',\r\n        LOG_ACTIVE_GENERATION:false,\r\n        LOG_VIEW_LOOKUPS: false\r\n      }, attrs); // but you can override;\r\n    \r\n      Router.reopen({\r\n        location: \'none\'\r\n      });\r\n    \r\n      Ember.run(function(){\r\n        App = Application.create(attributes);\r\n        App.setupForTesting();\r\n        App.injectTestHelpers();\r\n      });\r\n    \r\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\r\n    \r\n      return App;\r\n    }\n  });//# sourceURL=ember-vizkit/tests/helpers/start-app.js");

;eval("define(\"ember-vizkit/tests/test-helper\", \n  [\"ember-vizkit/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n\n    var setResolver = __dependency2__.setResolver;\n\n    \r\n    setResolver(resolver);\r\n    \r\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n  });//# sourceURL=ember-vizkit/tests/test-helper.js");
